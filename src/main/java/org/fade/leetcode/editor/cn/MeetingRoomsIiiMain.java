/**
ч╗Щф╜аф╕Аф╕кцХ┤цХ░ n я╝МхЕ▒цЬЙч╝ЦхП╖ф╗О 0 хИ░ n - 1 чЪД n ф╕кф╝ЪшооходуАВ 

 ч╗Щф╜аф╕Аф╕кф║Мч╗┤цХ┤цХ░цХ░ч╗Д meetings я╝МхЕ╢ф╕н meetings[i] = [starti, endi] шбичд║ф╕АхЬ║ф╝Ъшоох░Жф╝ЪхЬи хНКщЧн цЧ╢щЧ┤хМ║щЧ┤ [starti,
 endi) ф╕╛хКЮуАВцЙАцЬЙ starti чЪДхА╝ ф║Тф╕НчЫ╕хРМ уАВ 

 ф╝Ъшоох░Жф╝ЪцМЙф╗еф╕ЛцЦ╣х╝ПхИЖщЕНч╗Щф╝Ъшооходя╝Ъ 

 
 цпПхЬ║ф╝ЪшоощГ╜ф╝ЪхЬицЬкхНачФиф╕Фч╝ЦхП╖ цЬАх░П чЪДф╝Ъшооходф╕╛хКЮуАВ 
 хжВцЮЬц▓бцЬЙхПпчФичЪДф╝Ъшооходя╝Мф╝Ъшоох░Жф╝Ъх╗╢цЬЯя╝МчЫ┤хИ░хнШхЬичй║щЧ▓чЪДф╝ЪшооходуАВх╗╢цЬЯф╝ЪшоочЪДцМБч╗нцЧ╢щЧ┤хТМхОЯф╝ЪшооцМБч╗нцЧ╢щЧ┤ чЫ╕хРМ уАВ 
 х╜Уф╝ЪшооходхдДф║ОцЬкхНачФичК╢цАБцЧ╢я╝Мх░Жф╝Ъф╝ШхЕИцПРф╛Ыч╗ЩхОЯ х╝АхзЛ цЧ╢щЧ┤цЫ┤цЧйчЪДф╝ЪшооуАВ 
 

 ш┐ФхЫЮф╕╛хКЮцЬАхдЪцмбф╝ЪшоочЪДцИ┐щЧ┤ ч╝ЦхП╖ уАВхжВцЮЬхнШхЬихдЪф╕кцИ┐щЧ┤ц╗бш╢│цндцЭбф╗╢я╝МхИЩш┐ФхЫЮч╝ЦхП╖ цЬАх░П чЪДцИ┐щЧ┤уАВ 

 хНКщЧнхМ║щЧ┤ [a, b) цШп a хТМ b ф╣ЛщЧ┤чЪДхМ║щЧ┤я╝МхМЕцЛм a ф╜Ж ф╕НхМЕцЛм b уАВ 

 

 чд║ф╛Л 1я╝Ъ 

 ш╛УхЕея╝Ъn = 2, meetings = [[0,10],[1,5],[2,7],[3,4]]
ш╛УхЗ║я╝Ъ0
шзгщЗКя╝Ъ
- хЬицЧ╢щЧ┤ 0 я╝Мф╕дф╕кф╝ЪшооходщГ╜цЬкхНачФия╝Мчммф╕АхЬ║ф╝ЪшоохЬиф╝Ъшооход 0 ф╕╛хКЮуАВ
- хЬицЧ╢щЧ┤ 1 я╝МхПкцЬЙф╝Ъшооход 1 цЬкхНачФия╝Мчммф║МхЬ║ф╝ЪшоохЬиф╝Ъшооход 1 ф╕╛хКЮуАВ
- хЬицЧ╢щЧ┤ 2 я╝Мф╕дф╕кф╝ЪшооходщГ╜швлхНачФия╝Мчммф╕ЙхЬ║ф╝Ъшоох╗╢цЬЯф╕╛хКЮуАВ
- хЬицЧ╢щЧ┤ 3 я╝Мф╕дф╕кф╝ЪшооходщГ╜швлхНачФия╝МчммхЫЫхЬ║ф╝Ъшоох╗╢цЬЯф╕╛хКЮуАВ
- хЬицЧ╢щЧ┤ 5 я╝Мф╝Ъшооход 1 чЪДф╝Ъшооч╗УцЭЯуАВчммф╕ЙхЬ║ф╝ЪшоохЬиф╝Ъшооход 1 ф╕╛хКЮя╝МцЧ╢щЧ┤хСицЬЯф╕║ [5,10) уАВ
- хЬицЧ╢щЧ┤ 10 я╝Мф╕дф╕кф╝ЪшооходчЪДф╝ЪшоощГ╜ч╗УцЭЯуАВчммхЫЫхЬ║ф╝ЪшоохЬиф╝Ъшооход 0 ф╕╛хКЮя╝МцЧ╢щЧ┤хСицЬЯф╕║ [10,11) уАВ
ф╝Ъшооход 0 хТМф╝Ъшооход 1 щГ╜ф╕╛хКЮф║Ж 2 хЬ║ф╝Ъшооя╝МцЙАф╗еш┐ФхЫЮ 0 уАВ 
 

 чд║ф╛Л 2я╝Ъ 

 ш╛УхЕея╝Ъn = 3, meetings = [[1,20],[2,10],[3,5],[4,9],[6,8]]
ш╛УхЗ║я╝Ъ1
шзгщЗКя╝Ъ
- хЬицЧ╢щЧ┤ 1 я╝МцЙАцЬЙф╕Йф╕кф╝ЪшооходщГ╜цЬкхНачФия╝Мчммф╕АхЬ║ф╝ЪшоохЬиф╝Ъшооход 0 ф╕╛хКЮуАВ
- хЬицЧ╢щЧ┤ 2 я╝Мф╝Ъшооход 1 хТМ 2 цЬкхНачФия╝Мчммф║МхЬ║ф╝ЪшоохЬиф╝Ъшооход 1 ф╕╛хКЮуАВ
- хЬицЧ╢щЧ┤ 3 я╝МхПкцЬЙф╝Ъшооход 2 цЬкхНачФия╝Мчммф╕ЙхЬ║ф╝ЪшоохЬиф╝Ъшооход 2 ф╕╛хКЮуАВ
- хЬицЧ╢щЧ┤ 4 я╝МцЙАцЬЙф╕Йф╕кф╝ЪшооходщГ╜швлхНачФия╝МчммхЫЫхЬ║ф╝Ъшоох╗╢цЬЯф╕╛хКЮуАВ 
- хЬицЧ╢щЧ┤ 5 я╝Мф╝Ъшооход 2 чЪДф╝Ъшооч╗УцЭЯуАВчммхЫЫхЬ║ф╝ЪшоохЬиф╝Ъшооход 2 ф╕╛хКЮя╝МцЧ╢щЧ┤хСицЬЯф╕║ [5,10) уАВ
- хЬицЧ╢щЧ┤ 6 я╝МцЙАцЬЙф╕Йф╕кф╝ЪшооходщГ╜швлхНачФия╝Мчммф║ФхЬ║ф╝Ъшоох╗╢цЬЯф╕╛хКЮуАВ 
- хЬицЧ╢щЧ┤ 10 я╝Мф╝Ъшооход 1 хТМ 2 чЪДф╝Ъшооч╗УцЭЯуАВчммф║ФхЬ║ф╝ЪшоохЬиф╝Ъшооход 1 ф╕╛хКЮя╝МцЧ╢щЧ┤хСицЬЯф╕║ [10,12) уАВ 
ф╝Ъшооход 1 хТМф╝Ъшооход 2 щГ╜ф╕╛хКЮф║Ж 2 хЬ║ф╝Ъшооя╝МцЙАф╗еш┐ФхЫЮ 1 уАВ 
 

 

 цПРчд║я╝Ъ 

 
 1 <= n <= 100 
 1 <= meetings.length <= 10тБ╡ 
 meetings[i].length == 2 
 0 <= starti < endi <= 5 * 10тБ╡ 
 starti чЪДцЙАцЬЙхА╝ ф║Тф╕НчЫ╕хРМ 
 

 Related Topics цХ░ч╗Д цОТх║П хаЖя╝Иф╝ШхЕИщШЯхИЧя╝Й ЁЯСН 30 ЁЯСО 0

*/
  
package org.fade.leetcode.editor.cn;

import org.fade.leetcode.editor.cn.util.Utils;

import java.util.Arrays;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.TreeSet;

public class MeetingRoomsIiiMain {
      
    public static void main(String[] args) {
        Solution solution = new MeetingRoomsIiiMain().new Solution();
//        solution.mostBooked(2, Utils.parseToIntArrayArrayFromString("[[0,10],[1,5],[2,7],[3,4]]"));
//        solution.mostBooked(3, Utils.parseToIntArrayArrayFromString("[[1,20],[2,10],[3,5],[4,9],[6,8]]"));
//        solution.mostBooked(3, Utils.parseToIntArrayArrayFromString("[[3,7],[12,19],[16,17],[1,17],[5,6]]"));
        solution.mostBooked(2, Utils.parseToIntArrayArrayFromString("[[0,10],[1,2],[12,14],[15,16]]"));
    }
    
    //leetcode submit region begin(Prohibit modification and deletion)
    class Solution {

        public int mostBooked(int n, int[][] meetings) {
            Arrays.sort(meetings, Comparator.comparingInt(x -> x[0]));
            PriorityQueue<int[]> queue = new PriorityQueue<>(Comparator.comparingInt(x -> x[1]));
            PriorityQueue<int[]> waiting = new PriorityQueue<>(Comparator.comparingInt(x -> x[0]));
            int[] no = new int[n];
            TreeSet<Integer> available = new TreeSet<>();
            for (int i = 0; i < n; ++i) {
                available.add(i);
            }
            for (int i = 0; i < meetings.length; ++i) {
                waiting.offer(meetings[i]);
                while (!queue.isEmpty() && meetings[i][0] >= queue.peek()[1]) {
                    int[] poll = queue.poll();
                    if (waiting.isEmpty()) {
                        available.add(poll[2]);
                    } else {
                        ++no[poll[2]];
                        int[] wt = waiting.poll();
                        if (poll[1] > wt[0]) {
                            int t = poll[1] - wt[0];
                            queue.offer(new int[] {poll[1], wt[1] + t, poll[2]});
                        } else {
                            queue.offer(new int[] {wt[0], wt[1], poll[2]});
                        }
                    }
                }
                while (!available.isEmpty() && !waiting.isEmpty()) {
                    Integer integer = available.pollFirst();
                    ++no[integer];
                    int[] poll = waiting.poll();
                    queue.offer(new int[] {poll[0], poll[1], integer});
                }
            }
            while (!queue.isEmpty() && !waiting.isEmpty()) {
                int[] poll = queue.poll();
                ++no[poll[2]];
                int[] wt = waiting.poll();
                if (poll[1] > wt[0]) {
                    int t = poll[1] - wt[0];
                    queue.offer(new int[] {poll[1], wt[1] + t, poll[2]});
                } else {
                    queue.offer(new int[] {wt[0], wt[1], poll[2]});
                }
            }
            int ans = 0;
            for (int i = 0; i < n; ++i) {
                if (no[i] > no[ans]) {
                    ans = i;
                }
            }
            return ans;
        }

    }
    //leetcode submit region end(Prohibit modification and deletion)
        
}
