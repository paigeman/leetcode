/**
ËÆæËÆ°‰∏Ä‰∏™ÊîØÊåÅ push Ôºåpop Ôºåtop Êìç‰ΩúÔºåÂπ∂ËÉΩÂú®Â∏∏Êï∞Êó∂Èó¥ÂÜÖÊ£ÄÁ¥¢Âà∞ÊúÄÂ∞èÂÖÉÁ¥†ÁöÑÊ†à„ÄÇ 

 ÂÆûÁé∞ MinStackMain Á±ª:

 
 MinStackMain() ÂàùÂßãÂåñÂ†ÜÊ†àÂØπË±°„ÄÇ
 void push(int val) Â∞ÜÂÖÉÁ¥†valÊé®ÂÖ•Â†ÜÊ†à„ÄÇ 
 void pop() Âà†Èô§Â†ÜÊ†àÈ°∂ÈÉ®ÁöÑÂÖÉÁ¥†„ÄÇ 
 int top() Ëé∑ÂèñÂ†ÜÊ†àÈ°∂ÈÉ®ÁöÑÂÖÉÁ¥†„ÄÇ 
 int getMin() Ëé∑ÂèñÂ†ÜÊ†à‰∏≠ÁöÑÊúÄÂ∞èÂÖÉÁ¥†„ÄÇ 
 

 

 Á§∫‰æã 1: 

 
ËæìÂÖ•Ôºö
["MinStackMain","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

ËæìÂá∫Ôºö
[null,null,null,null,-3,null,0,-2]

Ëß£ÈáäÔºö
MinStackMain minStack = new MinStackMain();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> ËøîÂõû -3.
minStack.pop();
minStack.top();      --> ËøîÂõû 0.
minStack.getMin();   --> ËøîÂõû -2.
 

 

 ÊèêÁ§∫Ôºö 

 
 -2¬≥¬π <= val <= 2¬≥¬π - 1 
 pop„ÄÅtop Âíå getMin Êìç‰ΩúÊÄªÊòØÂú® ÈùûÁ©∫Ê†à ‰∏äË∞ÉÁî® 
 push, pop, top, and getMinÊúÄÂ§öË¢´Ë∞ÉÁî® 3 * 10‚Å¥ Ê¨° 
 

 Related Topics Ê†à ËÆæËÆ° üëç 1516 üëé 0

*/
  
package org.fade.leetcode.editor.cn;

import java.util.Deque;
import java.util.LinkedList;

public class MinStackMain {
      
    public static void main(String[] args) {
        MinStack solution = new MinStackMain().new MinStack();
        // ‰øùÂ≠òÂ∑ÆÂÄºÂÅöÊ≥ïÂèØ‰ª•‰ΩøÁ©∫Èó¥‰∏∫O(1)
    }
    
    //leetcode submit region begin(Prohibit modification and deletion)
    class MinStack {

        private final Deque<Integer> stack;

        private final Deque<Integer> min;

        public MinStack() {
            this.stack = new LinkedList<>();
            this.min = new LinkedList<>();
        }
        
        public void push(int val) {
            this.stack.push(val);
            Integer peek = this.min.peek();
            if (peek != null && peek < val) {
                Deque<Integer> tmp = new LinkedList<>();
                while (!this.min.isEmpty() && this.min.peek() < val) {
                    tmp.push(this.min.pop());
                }
                this.min.push(val);
                while (!tmp.isEmpty()) {
                    this.min.push(tmp.pop());
                }
            } else {
                this.min.push(val);
            }
        }
        
        public void pop() {
            if (!this.stack.isEmpty()) {
                Integer pop = stack.pop();
                Deque<Integer> tmp = new LinkedList<>();
                while (!this.min.isEmpty() && !this.min.peek().equals(pop)) {
                    tmp.push(this.min.pop());
                }
                if (!this.min.isEmpty()) {
                    this.min.pop();
                }
                while (!tmp.isEmpty()) {
                    this.min.push(tmp.pop());
                }
            }
        }
        
        public int top() {
            if (this.stack.isEmpty()) {
                throw new UnsupportedOperationException();
            }
            return this.stack.peek();
        }
        
        public int getMin() {
            if (this.min.isEmpty()) {
                throw new UnsupportedOperationException();
            }
            return this.min.peek();
        }

    }
    
    /**
     * Your MinStackMain object will be instantiated and called as such:
     * MinStackMain obj = new MinStackMain();
     * obj.push(val);
     * obj.pop();
     * int param_3 = obj.top();
     * int param_4 = obj.getMin();
     */
    //leetcode submit region end(Prohibit modification and deletion)
        
}